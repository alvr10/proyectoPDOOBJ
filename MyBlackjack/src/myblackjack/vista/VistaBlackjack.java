/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myblackjack.vista;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import myblackjack.*;

/**
 *
 * @author alvaro
 */
public final class VistaBlackjack extends javax.swing.JFrame {
    Player player = new Player();
    Dealer dealer = new Dealer();
    Shoe shoe = new Shoe();
    
    /**
     * Creates new form VistaBlackjack
     */
    public VistaBlackjack() {
        initComponents();
        setVisibility(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hitBtn = new javax.swing.JButton();
        standBtn = new javax.swing.JButton();
        surrenderBtn = new javax.swing.JButton();
        doubleDownBtn = new javax.swing.JButton();
        playBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        playerPanel = new javax.swing.JPanel();
        dealerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        hitBtn.setText("HIT");
        hitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hitBtnMouseClicked(evt);
            }
        });

        standBtn.setText("STAND");
        standBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                standBtnMouseClicked(evt);
            }
        });

        surrenderBtn.setText("SURR");
        surrenderBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                surrenderBtnMouseClicked(evt);
            }
        });

        doubleDownBtn.setText("DOUBLE");
        doubleDownBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubleDownBtnMouseClicked(evt);
            }
        });

        playBtn.setText("PLAY");
        playBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playBtnMouseClicked(evt);
            }
        });

        exitBtn.setText("EXIT");
        exitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitBtnMouseClicked(evt);
            }
        });
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        playerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        dealerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hitBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(standBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(surrenderBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doubleDownBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(exitBtn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dealerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(playBtn)
                                    .addGap(270, 270, 270))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(197, 197, 197)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(215, Short.MAX_VALUE)
                .addComponent(dealerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playBtn)
                .addGap(19, 19, 19)
                .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hitBtn)
                    .addComponent(standBtn)
                    .addComponent(surrenderBtn)
                    .addComponent(doubleDownBtn)
                    .addComponent(exitBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playBtnMouseClicked
        setVisibility(true);
        playBtn.setVisible(false);
        new Thread(() -> {
            startGame();
        }).start();
    }//GEN-LAST:event_playBtnMouseClicked

    private void hitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hitBtnMouseClicked
        doubleDownBtn.setVisible(false);
        surrenderBtn.setVisible(false);
        
        player.drawCard(shoe.getTopCardFromTopDeck());
        player.getHand().calculateTotalValue();
        
        System.out.println("Valor de la mano del jugador: " + player.getHand().calculateTotalValue());
        
        prevToAction();
        
        if (player.getHand().isBusted()) {
            System.out.println("Te pasaste de 21. Pierdes.");
            endGame();
        } else if (player.getHand().calculateTotalValue() == 21) {
            player.stand();
            dealerTurn();
        }
    }//GEN-LAST:event_hitBtnMouseClicked

    private void standBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_standBtnMouseClicked
        player.stand();
        updateGameState();
        setVisibility(false);
        dealerTurn();
    }//GEN-LAST:event_standBtnMouseClicked

    private void surrenderBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surrenderBtnMouseClicked
        player.surrender();
        updateGameState();
        setVisibility(false);
        playBtn.setVisible(true);
        endGame();
    }//GEN-LAST:event_surrenderBtnMouseClicked

    private void doubleDownBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubleDownBtnMouseClicked
        player.doubleDown(shoe.getTopCardFromTopDeck());
        updateGameState();
        setVisibility(false);
        dealerTurn();
    }//GEN-LAST:event_doubleDownBtnMouseClicked

    private void exitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitBtnMouseClicked

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitBtnActionPerformed
                                                         
    public void setVisibility(boolean visible) {
        hitBtn.setVisible(visible);
        surrenderBtn.setVisible(visible);
        doubleDownBtn.setVisible(visible);
        standBtn.setVisible(visible);
    }
    
    private void startGame() {
        for (int i = 0; i < 2; i++) {
            player.getHand().addCard(shoe.getTopCardFromTopDeck());
            dealer.getHand().addCard(shoe.getTopCardFromTopDeck());
        }
                
        System.out.println("Valor de la mano del jugador: " + player.getHand().calculateTotalValue());
        System.out.println("Valor de la mano del dealer: " + dealer.getHand().calculateTotalValue());
        
        prevToAction();

        if (dealer.getHand().checkForBlackjack() && player.getHand().checkForBlackjack()) {
            System.out.println("Es empate.");
            updateGameState();
            endGame();
        } else if (dealer.getHand().checkForBlackjack()) {
            System.out.println("Crupier recibe blackjack. Pierdes.");
            updateGameState();
            endGame();
        } else if (player.getHand().checkForBlackjack()) {
            System.out.println("Recibes blackjack. Ganas.");
            updateGameState();
            endGame();
        }
    }
    
    private void prevToAction() {
        playerPanel.removeAll();
        dealerPanel.removeAll();

        // Renderizar la mano del jugador
        for (Card card : player.getHand().getCards()) {
            String imagePath = card.getPath();
            JLabel cardLabel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource(imagePath)));
            playerPanel.add(cardLabel);
        }

        // Renderizar la mano del crupier
        String imagePath = dealer.getHand().getCards().get(1).getPath();
        JLabel cardLabel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource(imagePath)));
        dealerPanel.add(cardLabel);

        // Refrescar la interfaz
        playerPanel.revalidate();
        playerPanel.repaint();
        dealerPanel.revalidate();
        dealerPanel.repaint();
    }

    private void updateGameState() {
        // Limpiar los paneles anteriores
        playerPanel.removeAll();
        dealerPanel.removeAll();

        // Renderizar la mano del jugador
        for (Card card : player.getHand().getCards()) {
            String imagePath = card.getPath();
            JLabel cardLabel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource(imagePath)));
            playerPanel.add(cardLabel);
        }

        // Renderizar la mano del crupier
        for (Card card : dealer.getHand().getCards()) {
            String imagePath = card.getPath();
            JLabel cardLabel = new JLabel(new ImageIcon(getClass().getClassLoader().getResource(imagePath)));
            dealerPanel.add(cardLabel);
        }

        // Refrescar la interfaz
        playerPanel.revalidate();
        playerPanel.repaint();
        dealerPanel.revalidate();
        dealerPanel.repaint();
    }

    
    private void dealerTurn() {
        while (dealer.getHand().getTotalValue() < 17) {
            dealer.getHand().addCard(shoe.getTopCardFromTopDeck());
            dealer.getHand().calculateTotalValue();
            updateGameState();

            if (dealer.getHand().isBusted()) {
                System.out.println("El dealer se pasa de 21. ¡Ganas!");
                endGame();
                return;
            }
        }

        // Comparar resultados entre dealer y jugador después de que el dealer termine su turno
        int dealerTotal = dealer.getHand().getTotalValue();
        int playerTotal = player.getHand().getTotalValue();

        if (dealerTotal > playerTotal) {
            System.out.println("El dealer gana con " + dealerTotal + ".");
        } else if (dealerTotal < playerTotal) {
            System.out.println("Ganas con " + playerTotal + ".");
        } else {
            System.out.println("Es empate con " + playerTotal + ".");
        }
        endGame();
    }
    
    private void endGame() {
        // RESETEAR VARIABLES
        dealer.getHand().reset();
        player.getHand().reset();
        
        playBtn.setVisible(true);
        setVisibility(false);
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaBlackjack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaBlackjack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaBlackjack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaBlackjack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new VistaBlackjack().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dealerPanel;
    private javax.swing.JButton doubleDownBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JButton hitBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JPanel playerPanel;
    private javax.swing.JButton standBtn;
    private javax.swing.JButton surrenderBtn;
    // End of variables declaration//GEN-END:variables

}
